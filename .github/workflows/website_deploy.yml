name: Deploy Website

on:
  workflow_dispatch:  # Allow manual triggering

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'

      # Step 3: Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Step 4: Start MLflow Tracking Server
      - name: Check if MLflow server is already running
        id: check_mlflow
        run: |
          if lsof -i :5000; then
            echo "MLflow server is already running."
            echo "mlflow_running=true" >> $GITHUB_OUTPUT
          else
            echo "MLflow server is not running."
            echo "mlflow_running=false" >> $GITHUB_OUTPUT
          fi

      - name: Start MLflow Tracking Server (if not running)
        if: steps.check_mlflow.outputs.mlflow_running == 'false'
        run: |
          nohup mlflow server --backend-store-uri sqlite:///mlruns.db --default-artifact-root ./mlruns --host 0.0.0.0 --port 5000 > mlflow.log 2>&1 &
          sleep 120

      - name: Check MLflow Server Logs
        run: |
          cat mlflow.log

      - name: Verify MLflow Server
        run: |
          curl http://localhost:5000 || echo "MLflow server is not running"

      # Step 5: Start Flask API
      - name: Start Flask API
        run: |
          nohup python app.py > app.log 2>&1 &
          sleep 60  # Wait for the Flask API to start
          echo "Flask API started. Logs:"
          cat app.log

      # Step 6: Deploy the Website
      - name: Deploy Website
        run: |
          # Serve the website using a simple HTTP server
          nohup python -m http.server 5001 --directory ./templates > website.log 2>&1 &
          sleep 30  # Wait for the server to start
          echo "Website deployed. Logs:"
          cat website.log

      # Step 7: Install ngrok
      - name: Install ngrok
        run: |
          wget https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.zip
          unzip ngrok-stable-linux-amd64.zip
          ./ngrok authtoken 2rxOSTx3dUZV7ZFnz9ATxxPKEBi_81wqjfJiquaAY9qEqrBPw  # Replace with your ngrok auth token

      # Step 8: Start ngrok for Flask API
      - name: Start ngrok for Flask API
        run: |
          ./ngrok http 5000 > ngrok_flask.log 2>&1 &
          sleep 30  # Wait for ngrok to start
          echo "Flask API public URL:"
          cat ngrok_flask.log
          grep "Forwarding" ngrok_flask.log | awk '{print $2}'

      # Step 9: Start ngrok for Website
      - name: Start ngrok for Website
        run: |
          ./ngrok http 5001 > ngrok_website.log 2>&1 &
          sleep 30  # Wait for ngrok to start
          echo "Website public URL:"
          cat ngrok_website.log
          grep "Forwarding" ngrok_website.log | awk '{print $2}'